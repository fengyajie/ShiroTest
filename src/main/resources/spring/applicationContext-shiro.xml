<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
		
		<!-- web.xml中shiro的filter对应的bean -->
		<bean id="shiroFilter" class="com.fyj.filter.MyPermissionFactoryBean">
		   <property name="securityManager" ref="securityManager" />
		   <!-- loginurl 认证提交地址，如果没有认证将会请求此地址进行认证  ,请求此地址将由formAuthenticationFilter进行表单认证-->
		   <property name="loginUrl" value="/login"/>
		   <property name="successUrl" value="/" />
		   <property name="unauthorizedUrl" value="/unauthorizedJsp" />
		   <!-- 过滤链定义 -->
		   <!-- 自定义filter配置 -->
    <property name="filters">
        <map>
            <!-- 将自定义 的FormAuthenticationFilter注入shiroFilter中-->
            <entry key="authc" value-ref="myFormAuthenticationFilter" />
        </map>
    </property>
		   <!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
		   <property name="filterChainDefinitions">
		     <value>
		     <!-- 静态资源允许访问 -->
             <!-- anon允许访问 -->
             <!-- 忽略这个搞了一天的jquery引入 ,注意注意-->
               /css/** = anon
               /js/** = anon
              
		       /login = authc<!-- 程序使用Shiro提供的FormAuthenticationFilter过滤器进行登录校验时，我们并不需要自己写登录校验，Shiro会帮我们完成。
                                                                                                      今天在进行登录页面开发时，发现点击登录后，无法完成登录校验，Debug发现程序根本不会进到FormAuthenticationFilter的executeLogin方法，百思不得其解。
                                                                                                      到后来查找各种资料，才发现，遗漏了一项配置。
                                                                                                    解决方法
                                                                                                       解决方法就是：需要将loginUrl的访问权限设置为authc！-->
		       /refuse = anon
		       /success = anon
		       /register/registerJsp = anon
		       /form/userAdd = anon
		       /logout = logout
		       <!-- /index/selectUser = authc,roles[admin] -->
		       <!--/**=authc 表示所有的url都需要权限认证，authc是shiro中一个过滤器的简写-->
		       /** = user,perms,roles
		     </value>
		   </property>
		</bean>
		
		<!-- 安全管理器 -->
		<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		  <property name="realm" ref="customRealm"/>
		  <!-- 注入缓存管理器 --> 
		  <property name="cacheManager" ref="cacheManager"/>
		  <!-- 注入会话管理器 -->
		  <property name="sessionManager" ref="sessionManager"/>
		</bean>
		<bean id="customRealm" class="com.fyj.realm.CustomRealm">
		  <!--  密码匹配器-->
<!-- 		  <property name="CredentialsMatcher" ref="credentialsMatcher"/>
 -->		</bean>
		<!-- 凭证匹配器 -->
		<!-- <bean id="credentialsMatcher" class="com.fyj.realm.CredentialsMatcher">
		</bean> -->
		<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->  
<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">  
<property name="staticMethod"   
value="org.apache.shiro.SecurityUtils.setSecurityManager"/>  
    <property name="arguments" ref="securityManager"/>  
</bean>  
<!-- 开启aop，对类代理 -->
    <aop:config proxy-target-class="true"></aop:config>
    <!-- 开启shiro注解支持 -->
    <bean
        class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
<!-- 基于Form表单的身份验证过滤器,不配置也会注册此过滤器，表单中的用户账号，密码和loginUrl将采用默认值，建议配置 -->
<bean id="myFormAuthenticationFilter" class="com.fyj.filter.MyFormAuthenticationFilter">
  <property name="usernameParam" value="userName"/>
  <property name="passwordParam" value="password"/>
  <property name="rememberMeParam" value="rememberMe"/>
</bean>

<!-- rememberMe管理器 -->
<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
 <property name="cookie" ref="rememberMeCookie"/>
</bean>
<!-- 记住我cookie -->
<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
  <!-- rememberMe是cookie的名字 -->
  <constructor-arg value="rememberMe"/>
  <!-- 记住cookie的时间是30天 -->
  <property name="maxAge" value="2592000"/>
</bean>

<!-- 定义Session ID生成管理器 --> 
<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

<!-- 配置Session DAO的操作处理 --> 
<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO"> 
    <!-- 设置session缓存的名字，这个名字可以任意 --> 
    <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/> 
    <!-- 定义该Session DAO操作中所使用的ID生成器 --> 
    <property name="sessionIdGenerator" ref="sessionIdGenerator"/> 
</bean>

<!-- 配置需要向Cookie中保存数据的配置模版 --> 
<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie"> 
    <!-- 在Tomcat运行下默认使用的Cookie的名字为JSESSIONID --> <constructor-arg value="mldn-session-id"/> 
    <!-- 保证该系统不会受到跨域的脚本操作供给 --> 
    <property name="httpOnly" value="true"/> 
    <!-- 定义Cookie的过期时间，单位为秒，如果设置为-1表示浏览器关闭，则Cookie消失 --> 
    <property name="maxAge" value="-1"/> 
</bean>


<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
  <property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml"/>
</bean>

	<!--  会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
	  <!-- session的失效时长，单位毫秒 -->
	  <property name="globalSessionTimeOut" value="60000"/>
	  <!-- 删除失效的session -->
	  <property name="deleteInvalidSessions" value="true"/>
	  <!-- 定义要使用的无效的Session定时调度器 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- 需要让此session可以使用该定时调度器进行检测 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 定义Session可以进行序列化的工具类 -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!-- 定义sessionIdCookie模版可以进行操作的启用 -->
        <property name="sessionIdCookieEnabled" value="true"/>
	</bean>
	
	<!-- 配置session的定时验证检测程序类，以让无效的session释放 -->
    <bean id="sessionValidationScheduler"
        class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!-- 设置session的失效扫描间隔，单位为毫秒 -->
        <property name="sessionValidationInterval" value="100000"/>
        <!-- 随后还需要定义有一个会话管理器的程序类的引用 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean> 
<!-- Shiro生命周期处理器-->  
<bean id="lifecycleBeanPostProcessor"   
class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
</beans>